<программа>::= { <описание> } int main() <составной оператор>

<имя>::=<буква>|<имя><буква>|<имя><цифра>

<оператор>::=<оператор выражения> | <оператор ввода/вывода> |

<составной оператор> | <спец. оператор> | <описание>

<оператор выражения>::= <выражение>;

<выражение> ::= <выражение1> | <имя> = <выражение>

<выражение1>::= <простое выражение> | <выражение1>

<операция отношения><выражение1>

<операция отношения>::= > | < | != | <= | >= | ==

<простое выражение>::= <терм>{<операция сложения><терм>}

<терм>::= <атом1>{<операция умножения><атом1>}

<атом1>::=<атом> | <атом><возведение в степень><атом>|<атом><инкремент>

<атом>::= <имя> | (<выражение>) | <спец. атом>

<спец. атом>::= <конст> | <логич. значение> | ! <атом>

<операция сложения>::= + | - | ||

<операция умножения>::= * | / | && | div | %

<возведение в степень>::= ^

<операция присваивания> ::= =

<инкремент>::= ++ |--

<знак>::= <пусто> | + | –

<конст>::= <знак> <цифра> {<цифра>} | <цифра> {<цифра>}.<цифра> {<цифра>}

<логич. значение>::= true | false

<оператор ввода-вывода>::= cinout <список элементов>;

<список элементов>::= <элемент>{<элемент>}

<элемент>::= << <выражение> | << endl | << “строка” || >> <имя>

<составной оператор>::= { <оператор>{<оператор>} }

<описание>::= <тип> <секция>{,<секция>};

<секция>::= <имя> | <имя> = <выражение>

<тип>::= int | bool | double

<спец. оператор>::= <оператор for> | <оператор dowhile>

<оператор dowhile>::= do <оператор> while (<выражение>);

<оператор for> ::= <оператор cfor> | <оператор pfor> |

| <оператор cfor> <ветка else> | <оператор pfor> <ветка else>

<оператор cfor> ::= for (<выражение>; <выражение>; <выражение>) <оператор> |

| for (<описание> <выражение>; <выражение>) <оператор>

<оператор pfor> ::= for (<имя> := <выражение> <направление> <выражение>) <оператор> <направление> ::= to | downto

<ветка else> ::= else <оператор>

Примечания:

Ветка else у оператора for должна выполниться, если основное тело цикла не выполнилось ни разу. Оператор «for (В1; В2; В3) Тело» работает как «В1; while (B2) { тело; В3; }»

Переменная, описанная в теле составного оператора, не должна быть видима после тела этого оператора, имя переменной можно будет повторно объявлять дальше в этой программе.

Операция присваивания изменяет значение переменной при вычислении выражения, при этом возвращает результат присваивания. Например, cinout << a = b = 1+1 присвоит a и b значение 2 и выведет 2.
